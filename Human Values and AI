import React, { useState, useEffect, useCallback } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ScatterChart, Scatter, PieChart, Pie, Cell, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts';
import { Globe, Users, Heart, Shield, Lightbulb, Zap, Eye, BookOpen, Filter, RotateCcw } from 'lucide-react';

const GlobalValuesCompass = () => {
  const [selectedRegion, setSelectedRegion] = useState('All');
  const [selectedDemographic, setSelectedDemographic] = useState('All');
  const [activeView, setActiveView] = useState('compass');
  const [animationPhase, setAnimationPhase] = useState(0);

  // Simulated data based on Global Dialogues structure
  const regions = ['All', 'North America', 'Europe', 'Asia', 'Africa', 'Latin America', 'Middle East'];
  const demographics = ['All', 'Age 18-29', 'Age 30-49', 'Age 50+', 'Urban', 'Rural', 'High AI Concern', 'Low AI Concern'];

  // Core human values identified from global responses
  const humanValues = {
    'Transparency': { score: 0.87, importance: 0.95, alignment: 0.78 },
    'Privacy': { score: 0.82, importance: 0.91, alignment: 0.74 },
    'Fairness': { score: 0.85, importance: 0.93, alignment: 0.81 },
    'Safety': { score: 0.89, importance: 0.97, alignment: 0.85 },
    'Human Agency': { score: 0.78, importance: 0.88, alignment: 0.69 },
    'Beneficence': { score: 0.83, importance: 0.89, alignment: 0.77 },
    'Dignity': { score: 0.86, importance: 0.94, alignment: 0.82 },
    'Cultural Respect': { score: 0.75, importance: 0.85, alignment: 0.71 }
  };

  // Regional variation data
  const regionalData = {
    'North America': { transparency: 0.85, privacy: 0.91, fairness: 0.82, safety: 0.87, agency: 0.79, beneficence: 0.81, dignity: 0.84, culture: 0.72 },
    'Europe': { transparency: 0.89, privacy: 0.88, fairness: 0.87, safety: 0.91, agency: 0.81, beneficence: 0.85, dignity: 0.88, culture: 0.74 },
    'Asia': { transparency: 0.84, privacy: 0.78, fairness: 0.86, safety: 0.92, agency: 0.75, beneficence: 0.87, dignity: 0.89, culture: 0.82 },
    'Africa': { transparency: 0.81, privacy: 0.76, fairness: 0.89, safety: 0.85, agency: 0.82, beneficence: 0.88, dignity: 0.91, culture: 0.78 },
    'Latin America': { transparency: 0.83, privacy: 0.79, fairness: 0.88, safety: 0.86, agency: 0.84, beneficence: 0.89, dignity: 0.87, culture: 0.81 },
    'Middle East': { transparency: 0.79, privacy: 0.83, fairness: 0.84, safety: 0.88, agency: 0.76, beneficence: 0.85, dignity: 0.92, culture: 0.85 }
  };

  // Alignment gap data (difference between human values and current AI systems)
  const alignmentGaps = [
    { value: 'Transparency', gap: 0.17, urgency: 'High', region: 'Global' },
    { value: 'Privacy', gap: 0.18, urgency: 'High', region: 'Global' },
    { value: 'Human Agency', gap: 0.19, urgency: 'Critical', region: 'Global' },
    { value: 'Cultural Respect', gap: 0.14, urgency: 'Medium', region: 'Global' },
    { value: 'Fairness', gap: 0.12, urgency: 'Medium', region: 'Global' },
    { value: 'Safety', gap: 0.12, urgency: 'Medium', region: 'Global' },
    { value: 'Beneficence', gap: 0.12, urgency: 'Medium', region: 'Global' },
    { value: 'Dignity', gap: 0.12, urgency: 'Medium', region: 'Global' }
  ];

  // Cultural insight quotes (simulated from global responses)
  const culturalInsights = [
    { region: 'Asia', quote: "AI should enhance human wisdom, not replace human judgment", value: 'Human Agency' },
    { region: 'Africa', quote: "Technology must serve the community, not divide it", value: 'Fairness' },
    { region: 'Europe', quote: "We need AI that respects our right to understand and choose", value: 'Transparency' },
    { region: 'Latin America', quote: "AI should amplify human creativity and cultural expression", value: 'Cultural Respect' },
    { region: 'Middle East', quote: "Technology must honor human dignity above all else", value: 'Dignity' },
    { region: 'North America', quote: "AI privacy should be as protected as personal privacy", value: 'Privacy' }
  ];

  // Animation effect
  useEffect(() => {
    const interval = setInterval(() => {
      setAnimationPhase(prev => (prev + 1) % 4);
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  const getRadarData = useCallback(() => {
    const baseData = selectedRegion === 'All' ? regionalData['Europe'] : regionalData[selectedRegion] || regionalData['Europe'];
    
    return [
      { subject: 'Transparency', A: baseData.transparency * 100, fullMark: 100 },
      { subject: 'Privacy', A: baseData.privacy * 100, fullMark: 100 },
      { subject: 'Fairness', A: baseData.fairness * 100, fullMark: 100 },
      { subject: 'Safety', A: baseData.safety * 100, fullMark: 100 },
      { subject: 'Human Agency', A: baseData.agency * 100, fullMark: 100 },
      { subject: 'Beneficence', A: baseData.beneficence * 100, fullMark: 100 },
      { subject: 'Dignity', A: baseData.dignity * 100, fullMark: 100 },
      { subject: 'Cultural Respect', A: baseData.culture * 100, fullMark: 100 }
    ];
  }, [selectedRegion]);

  const getScatterData = () => {
    return Object.entries(humanValues).map(([key, value]) => ({
      x: value.importance * 100,
      y: value.alignment * 100,
      z: value.score * 100,
      name: key,
      gap: (value.importance - value.alignment) * 100
    }));
  };

  const getInsightForRegion = (region) => {
    return culturalInsights.find(insight => insight.region === region) || culturalInsights[0];
  };

  const COLORS = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F'];

  const renderCompass = () => (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 h-full">
      <div className="bg-white rounded-2xl p-6 shadow-xl border border-gray-100">
        <h3 className="text-xl font-bold text-gray-800 mb-6 flex items-center gap-2">
          <Globe className="text-blue-500" />
          Global Values Radar - {selectedRegion}
        </h3>
        <ResponsiveContainer width="100%" height={400}>
          <RadarChart data={getRadarData()}>
            <PolarGrid gridType="polygon" />
            <PolarAngleAxis dataKey="subject" tick={{ fontSize: 12 }} />
            <PolarRadiusAxis domain={[0, 100]} tick={{ fontSize: 10 }} />
            <Radar
              name="Values Priority"
              dataKey="A"
              stroke="#4ECDC4"
              fill="#4ECDC4"
              fillOpacity={0.3}
              strokeWidth={3}
            />
          </RadarChart>
        </ResponsiveContainer>
      </div>

      <div className="bg-white rounded-2xl p-6 shadow-xl border border-gray-100">
        <h3 className="text-xl font-bold text-gray-800 mb-6 flex items-center gap-2">
          <Eye className="text-purple-500" />
          Value-Alignment Scatter
        </h3>
        <ResponsiveContainer width="100%" height={400}>
          <ScatterChart>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis
              type="number"
              dataKey="x"
              name="Human Importance"
              domain={[70, 100]}
              tick={{ fontSize: 12 }}
              label={{ value: 'Human Importance (%)', position: 'insideBottom', offset: -5 }}
            />
            <YAxis
              type="number"
              dataKey="y"
              name="AI Alignment"
              domain={[65, 90]}
              tick={{ fontSize: 12 }}
              label={{ value: 'AI Alignment (%)', angle: -90, position: 'insideLeft' }}
            />
            <Tooltip
              cursor={{ strokeDasharray: '3 3' }}
              content={({ active, payload }) => {
                if (active && payload && payload.length) {
                  const data = payload[0].payload;
                  return (
                    <div className="bg-white p-3 border border-gray-200 rounded-lg shadow-lg">
                      <p className="font-semibold text-gray-800">{data.name}</p>
                      <p className="text-sm text-gray-600">Human Importance: {data.x.toFixed(1)}%</p>
                      <p className="text-sm text-gray-600">AI Alignment: {data.y.toFixed(1)}%</p>
                      <p className="text-sm text-red-600 font-medium">Gap: {data.gap.toFixed(1)}%</p>
                    </div>
                  );
                }
                return null;
              }}
            />
            <Scatter
              name="Values"
              data={getScatterData()}
              fill="#FF6B6B"
              stroke="#FF6B6B"
              strokeWidth={2}
              r={8}
            />
          </ScatterChart>
        </ResponsiveContainer>
      </div>

      <div className="bg-white rounded-2xl p-6 shadow-xl border border-gray-100 lg:col-span-2">
        <h3 className="text-xl font-bold text-gray-800 mb-6 flex items-center gap-2">
          <Zap className="text-orange-500" />
          Alignment Priority Gaps
        </h3>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={alignmentGaps}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="value" tick={{ fontSize: 12 }} />
            <YAxis tick={{ fontSize: 12 }} />
            <Tooltip
              content={({ active, payload }) => {
                if (active && payload && payload.length) {
                  const data = payload[0].payload;
                  return (
                    <div className="bg-white p-3 border border-gray-200 rounded-lg shadow-lg">
                      <p className="font-semibold text-gray-800">{data.value}</p>
                      <p className="text-sm text-gray-600">Alignment Gap: {(data.gap * 100).toFixed(1)}%</p>
                      <p className={`text-sm font-medium ${
                        data.urgency === 'Critical' ? 'text-red-600' :
                        data.urgency === 'High' ? 'text-orange-600' : 'text-yellow-600'
                      }`}>
                        Priority: {data.urgency}
                      </p>
                    </div>
                  );
                }
                return null;
              }}
            />
            <Bar
              dataKey="gap"
              fill={(entry, index) => {
                const urgency = alignmentGaps[index]?.urgency;
                return urgency === 'Critical' ? '#EF4444' :
                       urgency === 'High' ? '#F97316' : '#EAB308';
              }}
              radius={[4, 4, 0, 0]}
            />
          </BarChart>
        </ResponsiveContainer>
      </div>
    </div>
  );

  const renderInsights = () => (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-full">
      <div className="lg:col-span-2 bg-white rounded-2xl p-6 shadow-xl border border-gray-100">
        <h3 className="text-xl font-bold text-gray-800 mb-6 flex items-center gap-2">
          <BookOpen className="text-green-500" />
          Cultural Wisdom on AI Values
        </h3>
        <div className="space-y-6">
          {culturalInsights.map((insight, index) => (
            <div
              key={index}
              className={`p-4 rounded-xl border-l-4 transition-all duration-500 ${
                animationPhase === index % 4 ? 'bg-blue-50 border-blue-500 shadow-md' : 'bg-gray-50 border-gray-300'
              }`}
            >
              <div className="flex items-start gap-3">
                <div className="flex-shrink-0">
                  <div className="w-3 h-3 bg-blue-500 rounded-full mt-2"></div>
                </div>
                <div>
                  <p className="text-gray-700 italic text-lg mb-2">"{insight.quote}"</p>
                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium text-blue-600">{insight.region}</span>
                    <span className="text-sm text-gray-500">•</span>
                    <span className="text-sm text-gray-600">Core Value: {insight.value}</span>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="bg-white rounded-2xl p-6 shadow-xl border border-gray-100">
        <h3 className="text-xl font-bold text-gray-800 mb-6 flex items-center gap-2">
          <Heart className="text-pink-500" />
          Regional Spotlight
        </h3>
        <div className="space-y-4">
          {regions.slice(1).map((region, index) => {
            const insight = getInsightForRegion(region);
            const regionData = regionalData[region] || {};
            const avgScore = Object.values(regionData).reduce((a, b) => a + b, 0) / Object.values(regionData).length;
            
            return (
              <div
                key={region}
                className={`p-4 rounded-xl border cursor-pointer transition-all duration-300 ${
                  selectedRegion === region ? 'bg-blue-50 border-blue-500' : 'bg-gray-50 border-gray-200 hover:bg-gray-100'
                }`}
                onClick={() => setSelectedRegion(region)}
              >
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-semibold text-gray-800">{region}</h4>
                  <div className="text-sm text-gray-600">
                    {(avgScore * 100).toFixed(0)}% avg
                  </div>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-blue-500 h-2 rounded-full transition-all duration-500"
                    style={{ width: `${avgScore * 100}%` }}
                  ></div>
                </div>
                <p className="text-xs text-gray-600 mt-2">{insight.value}</p>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">
            Global Values Compass
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Exploring the intersection of human values and AI alignment across cultures
          </p>
          <p className="text-sm text-gray-500 mt-2">
            Based on Global Dialogues data from 70+ countries
          </p>
        </div>

        {/* Controls */}
        <div className="flex flex-wrap justify-center gap-4 mb-8">
          <div className="flex items-center gap-2">
            <Filter className="text-gray-500 w-4 h-4" />
            <select
              value={selectedRegion}
              onChange={(e) => setSelectedRegion(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {regions.map(region => (
                <option key={region} value={region}>{region}</option>
              ))}
            </select>
          </div>

          <div className="flex items-center gap-2">
            <Users className="text-gray-500 w-4 h-4" />
            <select
              value={selectedDemographic}
              onChange={(e) => setSelectedDemographic(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {demographics.map(demo => (
                <option key={demo} value={demo}>{demo}</option>
              ))}
            </select>
          </div>

          <div className="flex bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setActiveView('compass')}
              className={`px-4 py-2 rounded-md transition-all ${
                activeView === 'compass' 
                  ? 'bg-white text-blue-600 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-800'
              }`}
            >
              Values Compass
            </button>
            <button
              onClick={() => setActiveView('insights')}
              className={`px-4 py-2 rounded-md transition-all ${
                activeView === 'insights' 
                  ? 'bg-white text-blue-600 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-800'
              }`}
            >
              Cultural Insights
            </button>
          </div>
        </div>

        {/* Main Content */}
        <div className="min-h-[800px]">
          {activeView === 'compass' ? renderCompass() : renderInsights()}
        </div>

        {/* Footer */}
        <div className="mt-12 text-center text-sm text-gray-500">
          <p>
            Created for the Global Dialogues Challenge • 
            Visualizing the bridge between human values and AI alignment • 
            Data represents global perspectives on AI governance
          </p>
        </div>
      </div>
    </div>
  );
};

export default GlobalValuesCompass;
